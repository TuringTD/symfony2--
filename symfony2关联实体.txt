创建一个 Category 实体
php app/console doctrine:generate:entity --entity="AcmeStoreBundle:Category" --fields="name:string(255)"
创建一个 Product 实体
php app/console doctrine:generate:entity --entity="AcmeStoreBundle:Product" --fields="name:string(255)"
使用annotation(注释)来配置；

改造Category实体类
use Doctrine\Common\Collections\ArrayCollection;
class Category
{
    // ...

    /**
     * @ORM\OneToMany(targetEntity="Product", mappedBy="category")
     */
    protected $products;

    public function __construct()
    {
        $this->products = new ArrayCollection();
    }
}

改造Product实体类
class Product
{
    // ...
    /**
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="products")
     * @ORM\JoinColumn(name="category_id", referencedColumnName="id")
     */
    protected $category;
}

生成 get set 方法；
php app/console doctrine:generate:entities Acme

创建数据表
php app/console doctrine:schema:update --force

保存数据DEMO
use Acme\StoreBundle\Entity\Category;
use Acme\StoreBundle\Entity\Product;
use Symfony\Component\HttpFoundation\Response;

class DefaultController extends Controller
{
    public function createProductAction()
    {
        $category = new Category();
        $category->setName('Main Products');

        $product = new Product();
        $product->setName('Foo');
        $product->setPrice(19.99);
        // 关联
        $product->setCategory($category);

        $em = $this->getDoctrine()->getManager();
        $em->persist($category);
        $em->persist($product);
        $em->flush();

        return new Response(
            'Created product id: '.$product->getId()
            .' and category id: '.$category->getId()
        );
    }
}

//根据category 获取 所有的 product 实体；
public function showProductAction($id)
{
    $category = $this->getDoctrine()
        ->getRepository('AcmeStoreBundle:Category')
        ->find($id);
    $products = $category->getProducts();//这个products不是一条数据；
	//可以通过 get(key) 来获取第几条 实体对象；
	$products->get(0)->getName();
}

doctrine 生命周期回调
当你crud 之前之后时 想对数据做一下改变；可以用到；
例如 插入数据之前可以给 某个字段默认值；
/**
 * @ORM\Entity()
 * @ORM\HasLifecycleCallbacks() 这个只是annotation配置的时候加上
 */
class Product
{
    // ...
}

/**
 * @ORM\PrePersist (annotation配置)
 */
public function setCreatedAtValue()
{
    $this->createdAt = new \DateTime();
}

xml 配置
<!-- src/Acme/StoreBundle/Resources/config/doctrine/Product.orm.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<doctrine-mapping xmlns="http://doctrine-project.org/schemas/orm/doctrine-mapping"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://doctrine-project.org/schemas/orm/doctrine-mapping
                    http://doctrine-project.org/schemas/orm/doctrine-mapping.xsd">

    <entity name="Acme\StoreBundle\Entity\Product">
            <!-- ... -->
            <lifecycle-callbacks>
                <lifecycle-callback type="prePersist"
                    method="setCreatedAtValue" />
            </lifecycle-callbacks>
    </entity>
</doctrine-mapping>
更多doctrine关联信息 http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html
更多生命周期事件  http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#lifecycle-events

